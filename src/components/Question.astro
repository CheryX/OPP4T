---
import data from './data.json';
const questions = data.test;
---

<main>
    <p id="questionField">Question</p>

    <div id="answersComponent">

        <div id="new">
            <button data-index="0">A</button>
            <button data-index="1">B</button>
            <button data-index="2">C</button>
            <button data-index="3">D</button>
        </div>

        <div id="now">
            <button data-index="0">A</button>
            <button data-index="1">B</button>
            <button data-index="2">C</button>
            <button data-index="3">D</button>
        </div>

        <div id="old">
            <button data-index="0">A</button>
            <button data-index="1">B</button>
            <button data-index="2">C</button>
            <button data-index="3">D</button>
        </div>

    </div>

    <p id="points">Points:</p>

</main>

<script define:vars={{ questions }}>

    const iter = { old: 2, now: 1, new: 0 };
    const newNode =  '<div id="new"><button data-index="0">A</button><button data-index="1">B</button><button data-index="2">C</button><button data-index="3">D</button></div>';
    let nextQuestion = "";
    let points = 0;

    // Workaround so questionList remains unchanged
    const questionList = JSON.stringify(questions);
    var questionsTemp = JSON.parse(questionList).sort((a, b) => 0.5 - Math.random());

    [].slice.call(document.getElementById("now").children)
        .forEach(e => e.addEventListener("click", nextIteration));

    async function insertQuestion(questionData, id) {

        const correctAnswerIndex = Math.floor(Math.random() * 4);
        const correctAnswerElement = document.querySelectorAll(`[data-index="${correctAnswerIndex}"]`)[iter[id]];
        correctAnswerElement.innerText = questionData[1];
        correctAnswerElement.addEventListener("click", correct);

        const answerButtons = Array.from(document.getElementById(id).children);
        answerButtons.splice(correctAnswerIndex, 1);

        for (let i = 0; i < answerButtons.length; i++) {
            answerButtons[i].innerText = questionData[i + 2];
        }

    }

    async function correct(e) {

        points++;
        document.getElementById("points").innerText = `Points: ${points}`

        e.target.removeEventListener("click", correct)

        e.target.style.animation="click 0.5s linear";
        document.getElementById("questionField").style.animation = "click 0.5s linear"

        await new Promise(r => setTimeout(r, 500));

        e.target.style.animation="";
        document.getElementById("questionField").style.animation = ""
    }

    async function nextIteration() {

        document.getElementById('old').remove()
        document.getElementById('now').id = 'old';
        document.getElementById('new').id = 'now';

        document.getElementById('answersComponent').insertAdjacentHTML("afterbegin", newNode);

        [].slice.call(document.getElementById("now").children)
            .forEach(e => e.addEventListener("click", nextIteration));

        document.getElementById("questionField").innerText = nextQuestion
        generateQuestion("new");

    }


    async function generateQuestion(id, replaceTitle) {
        if (questionsTemp.length === 0) {
            questionsTemp = JSON.parse(questionList)
                .sort((a, b) => 0.5 - Math.random());
        }

        if (id == "now") document.getElementById("questionField").innerText = questionsTemp[0][0];
        if (id == "new") nextQuestion = questionsTemp[0][0];

        insertQuestion(questionsTemp[0], id);
        questionsTemp.splice(0, 1);

    }

    generateQuestion("old");
    generateQuestion("now");
    generateQuestion("new");

        
</script>

<style is:global>

#old, #new {
    opacity: 0.1;
}

#answersComponent {
    display: flex;
    flex-direction: column;
    align-items: stretch;
}

#answersComponent > div {
    display: flex;
    justify-content: space-between;

    transition: 
        opacity 1s;
}

#answersComponent > div > button {
    position: relative;
    cursor: pointer;
    
    background: none;
    padding: 0.2em 1em;
    border: none;

    color: var(--light);
    font-size: 4em;

    transition: 
        color 1s,
        transform 1s cubic-bezier(0.075, 0.82, 0.165, 1);
}

#now > button:hover {
    color: var(--gray);
    transform: translateY(5px);
}


#answersComponent > div > button::before {
    content: 'A';
    position: absolute;
    z-index: -100;
    color: rgba(0, 0, 0, 0.1);
    font-weight: 900;

    font-size: 1.4em;
    transform: translate(-60%, -14%);
}

#answersComponent > div > button:nth-child(1)::before {content: 'A';}
#answersComponent > div > button:nth-child(2)::before {content: 'B';}
#answersComponent > div > button:nth-child(3)::before {content: 'C';}
#answersComponent > div > button:nth-child(4)::before {content: 'D';}

@keyframes click {
    from {
        color: var(--light)
    }
    to {
        color: greenyellow;
    }
}

#questionField {
    text-align: center;
    font-size: 1.5em;
    margin-bottom: 4em;
}

</style>